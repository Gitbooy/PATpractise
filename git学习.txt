

1.配置git仓库
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

2.创建版本库
>1
$ mkdir learngit 
$ cd learngit
$ pwd  #显示当前目录
/Users/michael/learngit
创建版本库

>2
$ git init
通过git init命令把这个目录变成Git可以管理的仓库


3.把一个文件放到Git仓库
只需要两步
第一步，用命令git add告诉Git，把文件添加到仓库：
$ git add readme.txt

第二步，用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"
[master (root-commit) eaadf4e] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt

#1 file changed：1个文件被改动（我们新添加的readme.txt文件）；2 insertions：插入了两行内容（readme.txt有两行内容）。

[用ls或者dir命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名]

--------------------------------
【时光穿梭】

1.基本知识
git status 看看结果
可以让我们时刻掌握仓库当前的状态
一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的

git diff readme.txt
git diff顾名思义就是查看difference -- 查看改动的内容

注：修改后的文件需再次添加提交才行


2.版本回退
git log 命令显示从最近到最远的提交日志
即文件每次都改了什么内容
可以加上--pretty=oneline参数，用一行显示
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本

git reset --hard HEAD^
版本退回
HEAD表示当前版本，也就是最新的提交
上一个版本就是HEAD^
上上一个版本就是HEAD^^
往上100个版本写成HEAD~100

[cat readme.txt 查看内容]

git reset --hard 39a40[版本号]
实现回到现在

git reflog用来记录你的每一次命令，可查看所有版本号
要重返未来，以便确定要回到未来的哪个版本

3.工作区和暂存区
工作区（Working Directory）即电脑里能看到的目录
版本库（Repository） --stage暂存区，分支master，指向master的指针HEAD
即隐藏目录.git 

Changes not staged for commit: #文件被修改了，
Untracked files: #文件从来没有被添加过，它的状态是Untracked

4.管理修改
Git管理的是修改，而不是文件

第一次修改 -> git add -> 第二次修改 -> git commit
Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交

每次修改，如果不用git add到暂存区，那就不会加入到commit中

5.撤销修改
场景1：只修改了工作区某文件内容，撤销修改
	git checkout -- file
	或 git restore file
场景2：修改了工作区还添加到了暂存区，分两步
	1.git reset HEAD file
	  或git restore --staged file
	2.回到场景1
场景3：提交了不合适的修改到版本库时
	进行版本退回[让这个文件回到最近一次git commit]

[命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态]

6.删除文件
[rm test.txt 删除工作区文件]

从版本库中删除该文件，那就用git rm删掉，并且git commit：
$ git rm test.txt
$ git commit -m "remove test.txt"

版本库里还有，把工作区误删的文件恢复到最新版本
$ git checkout -- test.txt
注：git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

-----------------------
-----------------------

1.远程仓库
打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"

在用户主目录里找到.ssh目录，有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，id_rsa.pub是公钥

为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

----------------------------

1.添加远程库
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git
[注：github有提示,要在工作区目录下使用该命令]

关联后，使用命令git push -u origin 
master第一次推送master分支的所有内容；
实际上是把当前分支master推送到远程
[]

此后每次本地提交后，可以用git push origin master推送最新修改

---------------
克隆
$ git clone git@github.com:michaelliao/gitskills.git
[注：位置在用户目录下]


-------------------------------
-------------------------------
分支管理

1.创建与合并分支
查看分支:git branch
创建分支：git branch name
切换分支：git checkout name / git switch name
[撤销修改：git checkout -- file]
创建 + 切换：git checkout -b name / git switch -c name
合并某分支到当前分支：git merge name
删除分支:git branch -d name



2.解决冲突
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容

$ git log --graph --pretty=oneline --abbrev-commit
可以看到分支合并图

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

3.分支管理策略
[fast forward 快速合并：是将master指针直接指向另一个合并项中]
但这种模式下，删除分支后，会丢掉分支信息[也就是分支上的提交的内容]

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息

$ git merge --no-ff -m "merge with no-ff" dev
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward


4.bug 分支

git stash
把当前工作现场“储藏”起来，等以后恢复现场后继续工作

git stash list
工作现场储存查看

git stash apply 进行恢复
恢复后，stash内容并不删除，你需要用git stash drop来删除

git stash pop 恢复的同时把stash内容也删了 
[注：先转分支 在对应分支下进行工作现场的存储与恢复]
[注：git bash 中出现end 按下q即可回到$命令界面]

可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}

git cherry-pick <提交号>
复制一个特定的提交到当前分支,就不需要在dev分支上手动再把修bug的过程重复一遍
在master修复的bug 同时应用于其他分支 
[特定的提交在内容上改动在哪，复制的也在哪改动]

5.feature分支
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

6.多人协作

git remote 查看远程库信息
git remote -v 显示详细信息
显示可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址

推送分支
git push origin master/dev 主分支/开发分支
bug分支 feature分支视情况来决定是否推送

抓取分支

git clone git@github.com:Gitbooy/learngitNew.git
[注：从远程库clone时，默认情况下只能看到本地的master分支]

要在dev分支上开发，就必须创建远程origin的dev分支到本地
$ git checkout -b dev origin/dev
就可以在dev上继续修改，然后，时不时地把dev分支push到远程

最新提交和你试图推送的提交有冲突，推送失败
用git pull把最新的提交从origin/dev抓下来，
在本地合并，解决冲突，再推送

git pull失败，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
$ git branch --set-upstream-to=origin/dev dev
[注：以上两步可以按bash提示来进行]

git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样

----------------
----------------
1.标签管理

Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针

2.创建标签

git tag <name>
默认标签是打在最新提交的commit上

git tag 查看所有标签
标签不是按时间顺序列出，而是按字母排序的

git tag <name> <commit号>
对特定commit进行打标签

git show <tagname> 查看标签信息

git tag -a v0.1 -m "version 0.1 released" 1094adb
创建带有说明的标签，用-a指定标签名，-m指定说明文字

[注：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。]

3.操作标签

git tag -d v0.1 
删除打错的标签
[创建的标签都只存储在本地，不会自动推送到远程]

git push origin <tagname>
推送某个标签到远程

git push origin --tags
一次性推送全部尚未推送到远程的本地标签

删除远程标签
>>先从本地删除
git tag -d <tagname>
>>再从远程删除
git push origin :refs/tags/<tagname>

[可以登陆GitHub查看标签的存在]


4.使用Gitee

git remtoe -v 
查看远程库信息

git remote rm origin
删除已有的GitHub远程库

关联远程库
git remote add origin <SSH address>
git remote add origin git@gitee.com:liaoxuefeng/learngit.git

如果有多个远程库，我们需要用不同的名称来标识不同的远程库
git remote add github git@github.com:michaelliao/learngit.git
git remote add gitee git@gitee.com:liaoxuefeng/learngit.git

以后用github gitee 代替origin
[git push github master / git push gitee master]